#!/bin/sh
################################################################################
# (sqm) functions.qos (orig: functions.sh)
#
# These are all helper functions for various parts of SQM scripts. If you want
# to play around with your own shaper-qdisc-filter configuration look here for
# ready made tools, or examples start of on your own.
#
# Please note the SQM logger function is broken down into levels of logging.
# Use only levels appropriate to touch points in your script and realize the
# potential to overflow SYSLOG.
#
################################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#   Copyright (C) 2012-2018
#       Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#       Eric Luehrsen
#
################################################################################
#
# Revised & adapted:
#
# ancistrus
#
# Netgear's D7000 Nighthawk Router Experience Distributed Project
#
# https://github.com/negan07/ancistrus
#
# License: GPLv2
#
#


sqm_logger() {
    case $1 in
        ''|*[!0-9]*) LEVEL=$VERBOSITY_INFO ;; # empty or non-numbers
        *) LEVEL=$1; shift ;;
    esac

    if [ "$SQM_VERBOSITY_MAX" -ge "$LEVEL" ] && [ "$SQM_VERBOSITY_MIN" -le "$LEVEL" ] ; then
        echo "$@" >&2
    fi
    # slightly dangerous as this will keep adding to the log file
    if [ -n "${SQM_DEBUG}" -a "${SQM_DEBUG}" -eq "1" ]; then
        if [ "$SQM_VERBOSITY_MAX" -ge "$LEVEL" -o "$LEVEL" -eq "$VERBOSITY_TRACE" ]; then
            echo "$@" >> ${SQM_DEBUG_LOG}
        fi
    fi
}

sqm_error() { sqm_logger $VERBOSITY_ERROR ERROR: "$@"; }
sqm_warn() { sqm_logger $VERBOSITY_WARNING WARNING: "$@"; }
sqm_log() { sqm_logger $VERBOSITY_INFO "$@"; }
sqm_debug() { sqm_logger $VERBOSITY_DEBUG "$@"; }
sqm_trace() { sqm_logger $VERBOSITY_TRACE "$@"; }

# ipt needs a toggle to show the outputs for debugging (as do all users of >
# /dev/null 2>&1 and friends)
ipt() {
    # Try to wipe pre-existing rules and chains if any
    for rep in "s/-A/-D/g" "s/-I/-D/g" "s/-N/-X/g"
    do
        local d=$(echo $* | sed $rep)
        [ "$d" != "$*" ] && {
            sqm_trace "iptables ${d}"
            iptables $d >> ${OUTPUT_TARGET} 2>&1
                [ "$IP6MODE" != "disable" ] && {
                sqm_trace "ip6tables ${d}"
                ip6tables $d >> ${OUTPUT_TARGET} 2>&1
                }
        }
    done
    sqm_trace "iptables $*"
    iptables $* >> ${OUTPUT_TARGET} 2>&1
        [ "$IP6MODE" != "disable" ] && {
        sqm_trace "ip6tables $*"
        ip6tables $* >> ${OUTPUT_TARGET} 2>&1
        }
}

# wrapper to call tc to allow debug logging
tc_wrapper(){
    cmd_wrapper tc ${TC_BINARY} "$@"
}

# wrapper to call ip to allow debug logging
ip_wrapper(){
    cmd_wrapper ip ${IP_BINARY} "$@"
}

# the actual command execution wrapper
cmd_wrapper(){
    # $1: the symbolic name of the command for informative output
    # $2: the name of the binary to call (potentially including the full path)
    # $3-$end: the actual arguments for $2
    local CALLERID
    local CMD_BINARY
    local LAST_ERROR
    local RET

    CALLERID=$1 ; shift 1   # extract and remove the id string
    CMD_BINARY=$1 ; shift 1 # extract and remove the binary

    #sqm_trace "${CMD_BINARY} $@"
    LAST_ERROR=$( ${CMD_BINARY} "$@" 2>&1 )
    RET=$?
    #sqm_trace "${LAST_ERROR}"

    if [ "$RET" -eq "0" ] ; then
        sqm_debug "cmd_wrapper: ${CALLERID}: SUCCESS: ${CMD_BINARY} $@"
    else
        # this went south, try to capture & report more detail
        sqm_error "cmd_wrapper: ${CALLERID}: FAILURE (${RET}): ${CMD_BINARY} $@"
        sqm_error "cmd_wrapper: ${CALLERID}: LAST ERROR: ${LAST_ERROR}"
    fi

    return $RET
}


do_modules() {
    for MOD in $ALL_MODULES; do
        [ -d /sys/module/${MOD} ] || ${INSMOD} ${LIBDIR}/${MOD}.ko 2>>${OUTPUT_TARGET}
    done
}

undo_modules() {
    for MOD in $ALL_UNDO_MODULES; do
        [ -d /sys/module/${MOD} ] && ${RMMOD} ${LIBDIR}/${MOD}.ko 2>>${OUTPUT_TARGET}
    done
}

# Write a state file to the filename given as $1. This version will extract all
# variable names previoulsy defined in qos-sqm.conf and since it should contain all
# used variables in addition to $ALL_MODULES & $SQM_CHECK_QDISCS this should be the complete set.
write_defaults_vars_to_state_file() {
    local filename=$1
    shift
    #write var=val couples to $filename
    write_state_file ${filename} "$@"
    #add undo modules
    echo "ALL_UNDO_MODULES=\"${ALL_UNDO_MODULES}\"" >> ${filename}
    #add included modules
    echo "ALL_MODULES=\"${ALL_MODULES}\"" >> ${filename}
    #add check modules
    echo "SQM_CHECK_QDISCS=\"${SQM_CHECK_QDISCS}\"" >> ${filename}
}

# Write a state file to the filename given as $1. The remaining arguments are
# variable names that should be written to the state file.
write_state_file() {
    local filename=$1
    shift
    for var in "$@"; do
        val=$(eval echo '$'$var)
        echo "$var=\"$val\""
    done > ${filename}
}


# find the ifb device associated with a specific interface, return nothing if no
# ifb is associated with IF
get_ifb_associated_with_if() {
   local CUR_IF=$1
  # extended grep not working so this workaround
  #local CUR_IFB=$( $TC_BINARY -p filter show parent ffff: dev ${CUR_IF} | grep -o -E ifb'[^)\ ]+' )
   local CUR_IFB=$( $TC_BINARY -p filter show parent ffff: dev ${CUR_IF} | grep -o $( ifb_name ${CUR_IF} ) )
   sqm_debug "ifb associated with interface ${CUR_IF}: ${CUR_IFB}"

    # we could not detect an associated IFB for CUR_IF
    if [ -z "${CUR_IFB}" ]; then
        local TMP=$( $TC_BINARY -p filter show parent ffff: dev ${CUR_IF} )
        if [ ! -z "${TMP}" ]; then
            # oops, there is output but we failed to properly parse it? Ask for a user report
            sqm_error "#---- CUT HERE ----#"
            sqm_error "get_ifb_associated_with_if failed to extrect the ifb name from:"
            sqm_error $( $TC_BINARY -p filter show parent ffff: dev ${CUR_IF} )
            sqm_error "Please report this as an issue at https://github.com/tohojo/sqm-scripts"
            sqm_error "Please copy and paste everything below the cut-here line into your issue report, thanks."
        else
            sqm_debug "Currently no ifb is associated with ${CUR_IF}, this is normal during starting of the sqm system."
        fi
    fi
    echo ${CUR_IFB}
}

ifb_name() {
    local CUR_IF=$1
    local MAX_IF_NAME_LENGTH=15
    local IFB_PREFIX="ifb4"
    local NEW_IFB="${IFB_PREFIX}${CUR_IF}"
    local IFB_NAME_LENGTH=${#NEW_IFB}
    # IFB names can only be 15 chararcters, so we chop of excessive characters
    # at the start of the interface name
    if [ ${IFB_NAME_LENGTH} -gt ${MAX_IF_NAME_LENGTH} ]; then
        local OVERLIMIT=$(( ${#NEW_IFB} - ${MAX_IF_NAME_LENGTH} ))
        NEW_IFB=${IFB_PREFIX}${CUR_IF:${OVERLIMIT}:$(( ${MAX_IF_NAME_LENGTH} - ${#IFB_PREFIX} ))}
    fi
    echo ${NEW_IFB}
}

# if required
create_new_ifb_for_if() {
    local NEW_IFB=$(ifb_name $1)
    create_ifb ${NEW_IFB}
    local RET=$?
    echo $NEW_IFB
    return $RET
}


# TODO: report failures
create_ifb() {
    local CUR_IFB=${1}
    $IP link add name ${CUR_IFB} type ifb
}

delete_ifb() {
    local CUR_IFB=${1}
    $IP link set dev ${CUR_IFB} down
    $IP link delete ${CUR_IFB} type ifb
}


# the best match is either the IFB already associated with the current interface
# or a new named IFB
get_ifb_for_if() {
    local CUR_IF=$1
    # if an ifb is already associated return that
    local CUR_IFB=$( get_ifb_associated_with_if ${CUR_IF} )
    [ -z "$CUR_IFB" ] && CUR_IFB=$( create_new_ifb_for_if ${CUR_IF} )
    [ -z "$CUR_IFB" ] && sqm_warn "Could not find existing IFB for ${CUR_IF}, nor create a new IFB instead..."
    echo ${CUR_IFB}
}


# Verify that a qdisc is available, using a series of checks that are
# progressively "heavier" and less desirable. These begin with different
# passive module introspection methods and end with a full instantiation of
# the qdisc on a temporary IFB network device.
#
# This last approach is to be avoided as much as possible. It should only be
# necessary for builtin qdisc modules on minimal (or broken) Linux distros.
verify_qdisc() {
    local qdisc=$1

    [ -n "$qdisc" ] || return 1

    # if static module with version/parameters, on minimal Linux distro by now
    if [ -d /sys/module/sch_$qdisc ]; then
        sqm_debug "QDISC $qdisc is useable."
        return 0
    fi

    # try heavy-weight instantiation of qdisc on ifb
    local ifb=TMP_IFB_4_SQM
    local root_string="root" # this works for most qdiscs
    local args=""
    local IFB_MTU=1514

    create_ifb $ifb || return 1

    case $qdisc in
        #ingress is special
        ingress) root_string="" ;;
        #cannot instantiate tbf without args
        tbf)
#            IFB_MTU=$( get_mtu $ifb )
#            IFB_MTU=$(( ${IFB_MTU} + 14 )) # TBF's warning is confused, it says MTU but it checks MTU + 14
            IFB_MTU=$(( $( get_mtu $ifb ) + 14 ))
            args="limit 1 burst ${IFB_MTU} rate 1kbps" ;;
    esac

    $TC qdisc replace dev $ifb $root_string $qdisc $args
    res=$?
    if [ "$res" = "0" ] ; then
        sqm_debug "QDISC $qdisc is useable."
    else
        sqm_error "QDISC $qdisc is NOT useable."
    fi

    delete_ifb $ifb
    return $res
}


get_htb_adsll_string() {
    ADSLL=""
    if [ "$LLAM" = "htb_private" -a "$LINKLAYER" != "none" ]; then
        # HTB defaults to MTU 1600 and an implicit fixed TSIZE of 256, but HTB
        # as of around 3.10.0 does not actually use a table in the kernel
        ADSLL="mpu ${STAB_MPU} linklayer ${LINKLAYER} overhead ${OVERHEAD} mtu ${STAB_MTU}"
        sqm_debug "ADSLL: ${ADSLL}"
    fi
    echo ${ADSLL}
}

get_stab_string() {
    STABSTRING=""
    local TMP_LLAM=${LLAM}
    if [ "${LLAM}" = "default" ]; then
	sqm_debug "LLA: default link layer adjustment method is tc_stab"
	TMP_LLAM="tc_stab"
    fi

    if [ "${TMP_LLAM}" = "tc_stab" -a "$LINKLAYER" != "none" ]; then
        STABSTRING="stab mtu ${STAB_MTU} tsize ${STAB_TSIZE} mpu ${STAB_MPU} overhead ${OVERHEAD} linklayer ${LINKLAYER}"
        sqm_debug "STAB: ${STABSTRING}"
    fi
    echo ${STABSTRING}
}


# The following three functions provide built-in support for configuring
# arbitrary shaper, leaf qdisc and prioritisation schemes. They utilize the
# tree, qdisc and qos functions developed in qdisc_funcs.sh and qos_funcs.sh
# to cleanly replace functionality of existing scripts. These functions or
# other subfunctions can be overridden for user customization by passing a
# supplementary script via the SCRIPT configuration variable.

egress() {
    qdisc_tree_build egress $IFACE

    # setup classful diffserv if necessary
    qos_setup_egress

    ipt_squash_egress
}


ingress() {
    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    qdisc_tree_build ingress $DEV

    # setup classful diffserv if necessary
    qos_setup_ingress

    ipt_squash_ingress

    $IP link set dev $DEV up

    # redirect all IP packets arriving in $IFACE to $DEV
    $TC filter add dev $IFACE parent ffff: protocol all prio 10 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev $DEV
}


sqm_start() {
    [ -n "$IFACE" ] || return 1
    do_modules
    verify_configs || return 1
    sqm_debug "Starting built-in sqm_start()"

    [ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )

    qos_setup_common

    if [ "$UPLINK" -ne 0 ]; then
        egress
        sqm_debug "egress shaping activated"
    else
        ipt_squash_egress
        sqm_debug "egress shaping deactivated"
        $TC qdisc del dev $IFACE root 2> /dev/null
    fi

    if [ "$DOWNLINK" -ne 0 ]; then
        verify_qdisc ingress "ingress" || return 1
        ingress
        sqm_debug "ingress shaping activated"
    else
        ipt_squash_ingress
        sqm_debug "ingress shaping deactivated"
        $TC qdisc del dev $DEV root 2> /dev/null
        $TC qdisc del dev $IFACE ingress 2> /dev/null
    fi

    return 0
}


sqm_stop() {
    $TC qdisc del dev $IFACE ingress #2>> ${OUTPUT_TARGET}
    $TC qdisc del dev $IFACE root #2>> ${OUTPUT_TARGET}
    [ -n "$CUR_IFB" ] && $TC qdisc del dev $CUR_IFB root #2>> ${OUTPUT_TARGET}
    [ -n "$CUR_IFB" ] && sqm_debug "${0}: ${CUR_IFB} shaper deleted"

    ipt -t mangle -F
    ipt -t mangle -X

    [ -n "$CUR_IFB" ] && $IP link set dev ${CUR_IFB} down
    [ -n "$CUR_IFB" ] && $IP link delete ${CUR_IFB} type ifb
    [ -n "$CUR_IFB" ] && sqm_debug "${0}: ${CUR_IFB} interface deleted"

    undo_modules
}

# Allow better control over HTB's quantum variable.
# This checks how many bytes htb tries to deque from the current tier before
# switching to the next, if this is large mixing between priority tiers will
# be lumpy, but at a lower CPU cost. In first approximation quantum should not be
# larger than burst.
get_htb_quantum() {
    local HTB_MTU=$( get_mtu $1 )
    local BANDWIDTH=$2
    local DURATION_US=$3
    local MIN_QUANTUM
    local QUANTUM

    sqm_debug "get_htb_quantum: 1: ${1}, 2: ${2}, 3: ${3}"

    if [ -z "${DURATION_US}" ] ; then
        DURATION_US=1000 # the duration of the burst in microseconds
        sqm_warn "get_htb_quantum (by duration): Defaulting to ${DURATION_US} microseconds."
    fi

    if [ -n "${HTB_MTU}" -a "${DURATION_US}" -gt "0" ] ; then
        QUANTUM=$( get_burst ${HTB_MTU} ${BANDWIDTH} ${DURATION_US} )
    fi

    if [ -z "$QUANTUM" ]; then
#        MIN_QUANTUM=$(( ${MTU} + 48 )) # add 48 bytes to MTU for the overhead
#        MIN_QUANTUM=$(( ${MIN_QUANTUM} + 47 )) # now do ceil(Min_BURST / 48) * 53 in shell integer arithmic
#        MIN_QUANTUM=$(( ${MIN_QUANTUM} / 48 ))
#        MIN_QUANTUM=$(( ${MIN_QUANTUM} * 53 )) # for MTU 1489 to 1536 this will result in MIN_BURST = 1749 Bytes
         MIN_QUANTUM=$(( (${MTU} + 95) / 48 * 53 ))
    sqm_warn "get_htb_quantum: 0 bytes quantum will not work, defaulting to one ATM/AAL5 expanded MTU packet with overhead: ${MIN_QUANTUM}"
        echo ${MIN_QUANTUM}
    else
        echo ${QUANTUM}
    fi
}

# Try to define the burst parameter in the duration required to transmit a burst
# at the configured bandwidth conceptuallly the matching quantum for this burst
# should be BURST/number_of_tiers to give each htb tier a chance to dequeue into
# each burst, but that most likely will end up with a somewhat too small quantum.
# Note: to get htb to report the configured burst/cburst one needs to issue
# the following command (for ifb4pppoe-wan):
#	tc -d class show dev ifb4pppoe-wan
get_burst() {
    local MTU=$1
    local BANDWIDTH=$2 # note bandwidth is always given in kbps
    local SHAPER_BURST_US=$3
    local MIN_BURST
    local BURST

    sqm_debug "get_burst: 1: ${1}, 2: ${2}, 3: ${3}"

    if [ -z "${SHAPER_BURST_US}" ] ; then
	SHAPER_BURST_US=1000 # the duration of the burst in microseconds
	sqm_warn "get_burst (by duration): Defaulting to ${SHAPER_BURST_US} microseconds bursts."
    fi

    # let's assume ATM/AAL5 to be the worst case encapsulation
    # and 48 Bytes a reasonable worst case per packet overhead
#    MIN_BURST=$(( ${MTU} + 48 ))	# add 48 bytes to MTU for the overhead
#    MIN_BURST=$(( ${MIN_BURST} + 47 ))	# now do ceil(Min_BURST / 48) * 53 in shell integer arithmic
#    MIN_BURST=$(( ${MIN_BURST} / 48 ))
#    MIN_BURST=$(( ${MIN_BURST} * 53 ))	# for MTU 1489 to 1536 this will result in MIN_BURST = 1749 Bytes
    MIN_BURST=$(( (${MTU} + 95) / 48 * 53 ))

    # htb/tbf expect burst to be specified in bytes, while bandwidth is in kbps
    BURST=$(( ${SHAPER_BURST_US} * ${BANDWIDTH} / 8000 ))

    if [ ${BURST} -lt ${MIN_BURST} ] ; then
        sqm_log "get_burst (by duration): the calculated burst/quantum size of ${BURST} bytes was below the minimum of ${MIN_BURST} bytes."
	BURST=${MIN_BURST}
    fi

    sqm_debug "get_burst: BURST [Byte]: ${BURST}, BANDWIDTH [Kbps]: ${BANDWIDTH}, DURATION [us]: ${SHAPER_BURST_US}"

    echo ${BURST}
}

# Create optional burst parameters to leap over CPU interrupts when the CPU is
# severly loaded. We need to be conservative though.
get_htb_burst() {
    local HTB_MTU=$( get_mtu $1 )
    local BANDWIDTH=$2
    local DURATION_US=$3
    local BURST

    sqm_debug "get_htb_burst: 1: ${1}, 2: ${2}, 3: ${3}"

    if [ -z "${DURATION_US}" ] ; then
        DURATION_US=1000 # the duration of the burst in microseconds
        sqm_warn "get_htb_burst (by duration): Defaulting to ${DURATION_US} microseconds."
    fi

    if [ -n "${HTB_MTU}" -a "${DURATION_US}" -gt "0" ] ; then
        BURST=$( get_burst ${HTB_MTU} ${BANDWIDTH} ${DURATION_US} )
    fi

    if [ -z "$BURST" ]; then
	sqm_debug "get_htb_burst: Default Burst, HTB will use MTU plus shipping and handling"
    else
        echo burst $BURST cburst $BURST
    fi
}

# For a default PPPoE link this returns 1492 just as expected but I fear we
# actually need the wire size of the whole thing not so much the MTU
get_mtu() {
    CUR_MTU=$(cat /sys/class/net/$1/mtu)
    sqm_debug "IFACE: ${1} MTU: ${CUR_MTU}"
    echo ${CUR_MTU}
}

# Set the autoflow variable to 1 if you want to limit the number of flows
# otherwise the default of 1024 will be used for all Xfq_codel qdiscs.

get_flows() {
    case $QDISC in
        codel|ns2_codel|pie|*fifo|pfifo_fast) ;;
        fq_codel|*fq_codel|sfq) echo flows $( get_flows_count ${1} ) ;;
    esac
}

get_flows_count() {
    if [ "${AUTOFLOW}" -eq "1" ]; then
        FLOWS=8
        [ $1 -gt 999 ] && FLOWS=16
        [ $1 -gt 2999 ] && FLOWS=32
        [ $1 -gt 7999 ] && FLOWS=48
        [ $1 -gt 9999 ] && FLOWS=64
        [ $1 -gt 19999 ] && FLOWS=128
        [ $1 -gt 39999 ] && FLOWS=256
        [ $1 -gt 69999 ] && FLOWS=512
        [ $1 -gt 99999 ] && FLOWS=1024
        case $QDISC in
          codel|ns2_codel|pie|*fifo|pfifo_fast) ;;
          fq_codel|*fq_codel|sfq) echo $FLOWS ;;
        esac
    else
        case $QDISC in
          codel|ns2_codel|pie|*fifo|pfifo_fast) ;;
          fq_codel|*fq_codel|sfq) echo 1024 ;;
        esac
    fi
}

# set the target parameter, also try to only take well formed inputs
# Note, the link bandwidth in the current direction (ingress or egress)
# is required to adjust the target for slow links
get_target() {
    local CUR_TARGET=${1}
    local CUR_LINK_KBPS=${2}
    [ ! -z "$CUR_TARGET" ] && sqm_debug "cur_target: ${CUR_TARGET} cur_bandwidth: ${CUR_LINK_KBPS}"
    CUR_TARGET_STRING=
    # either e.g. 100ms or auto
    CUR_TARGET_VALUE=$( echo ${CUR_TARGET} | grep -o -e \^'[[:digit:]]\+' )
    CUR_TARGET_UNIT=$( echo ${CUR_TARGET} | grep -o -e '[[:alpha:]]\+'\$ )

    AUTO_TARGET=
    UNIT_VALID=

    case $QDISC in
        *codel|*pie)
            if [ ! -z "${CUR_TARGET_VALUE}" -a ! -z "${CUR_TARGET_UNIT}" ];
            then
                case ${CUR_TARGET_UNIT} in
                    # permissible units taken from: tc_util.c get_time()
                    s|sec|secs|ms|msec|msecs|us|usec|usecs)
                        CUR_TARGET_STRING="target ${CUR_TARGET_VALUE}${CUR_TARGET_UNIT}"
                        UNIT_VALID="1"
                        ;;
                esac
            fi
            # empty field or undefined variable now defaults to auto
            if [ -z "${CUR_TARGET_VALUE}" -a -z "${CUR_TARGET_UNIT}" ];
            then
                if [ ! -z "${CUR_LINK_KBPS}" ]; then
                    TMP_TARGET_US=$( adapt_target_to_slow_link $CUR_LINK_KBPS )
                    TMP_INTERVAL_STRING=$( adapt_interval_to_slow_link $TMP_TARGET_US )
                    CUR_TARGET_STRING="target ${TMP_TARGET_US}us ${TMP_INTERVAL_STRING}"
                    AUTO_TARGET="1"
                    sqm_debug "get_target defaulting to auto."
                else
                    sqm_warn "required link bandwidth in kbps not passed to get_target()."
                fi
            fi
            # but still allow explicit use of the keyword auto for backward compatibility
            case ${CUR_TARGET_UNIT} in
                auto|Auto|AUTO)
                    if [ ! -z "${CUR_LINK_KBPS}" ]; then
                        TMP_TARGET_US=$( adapt_target_to_slow_link $CUR_LINK_KBPS )
                        TMP_INTERVAL_STRING=$( adapt_interval_to_slow_link $TMP_TARGET_US )
                        CUR_TARGET_STRING="target ${TMP_TARGET_US}us ${TMP_INTERVAL_STRING}"
                        AUTO_TARGET="1"
                    else
                        sqm_warn "required link bandwidth in kbps not passed to get_target()."
                    fi
                    ;;
            esac

            case ${CUR_TARGET_UNIT} in
                default|Default|DEFAULT)
                    if [ ! -z "${CUR_LINK_KBPS}" ]; then
                        CUR_TARGET_STRING=""    # return nothing so the default target is not over-ridden...
                        AUTO_TARGET="1"
                        sqm_debug "get_target using qdisc default, no explicit target string passed."
                    else
                        sqm_warn "required link bandwidth in kbps not passed to get_target()."
                    fi
                    ;;
            esac
            if [ ! -z "${CUR_TARGET}" ]; then
                if [ -z "${CUR_TARGET_VALUE}" -o -z "${UNIT_VALID}" ]; then
                    [ -z "$AUTO_TARGET" ] && sqm_warn "${CUR_TARGET} is not a well formed tc target specifier; e.g.: 5ms (or s, us), or one of the strings auto or default."
                fi
            fi
            ;;
    esac
    echo $CUR_TARGET_STRING
}

# for low bandwidth links fq_codels default target of 5ms does not work too well
# so increase target for slow links (note below roughly 2500kbps a single packet
# will take more than 5 ms to be transferred over the wire)
adapt_target_to_slow_link() {
    LINK_BW=$1
    # for ATM the worst case expansion including overhead seems to be 33 clls of
    # 53 bytes each
    #MAX_DELAY=$(( 1000 * 1000 * 33 * 53 * 8 / 1000 )) Max delay in us at 1kbps
    TARGET=$(( 13992000 / ${LINK_BW} ))  # note this truncates the decimals

    # do not change anything for fast links
    [ "$TARGET" -lt 5000 ] && TARGET=5000
    case ${QDISC} in
        *codel|pie)
            echo "${TARGET}"
            ;;
    esac
}

# codel looks at a whole interval to figure out wether observed latency stayed
# below target if target >= interval that will not work well, so increase
# interval by the same amonut that target got increased
adapt_interval_to_slow_link() {
    TARGET=$1
    case ${QDISC} in
        *codel)
            # Note this is not following codel theory to well as target should
            # be 5-10% of interval and the simple addition does not conserve
            # that relationship
            #INTERVAL=$(( (100 - 5) * 1000 + ${TARGET} ))
            INTERVAL=$(( 95000 + ${TARGET} ))
            echo "interval ${INTERVAL}us"
            ;;
        pie)
            ## not sure if pie needs this, probably not
            ##TUPDATE=$(( (30 - 20) * 1000 + ${TARGET} ))
            #TUPDATE=$(( 10000 + ${TARGET} ))
            #echo "tupdate ${TUPDATE}us"
            ;;
    esac
}


# set quantum parameter if available for this qdisc
get_quantum() {
    case $QDISC in
        *fq_codel|fq_pie|drr) echo quantum $1 ;;
        *) ;;
    esac
}

# only show limits to qdiscs that can handle them...
# Note that $LIMIT contains the default limit
get_limit() {
    CURLIMIT=$1
    case $QDISC in
    *codel|*pie|pfifo_fast|sfq|pfifo) [ -z ${CURLIMIT} ] && CURLIMIT=${LIMIT}  # global default limit
    ;;
    bfifo) [ -z "$CURLIMIT" ] && [ ! -z "$LIMIT" ] && CURLIMIT=$(( ${LIMIT} * $( get_mtu ${IFACE} ) )) # bfifo default to txquelength * MTU,
    ;;
    *) sqm_warn "qdisc ${QDISC} does not support a limit"
    ;;
    esac
    sqm_debug "get_limit: $1 CURLIMIT: ${CURLIMIT}"

    if [ ! -z "$CURLIMIT" ]; then
        echo "limit ${CURLIMIT}"
    fi
}

get_ecn() {
    CURECN=$1
    case ${CURECN} in
        ECN)
            case $QDISC in
                *codel|*pie|*red)
                    CURECN=ecn
                    ;;
                *)
                    CURECN=""
                    ;;
            esac
            ;;
        NOECN)
            case $QDISC in
                *codel|*pie|*red)
                    CURECN=noecn
                    ;;
                *)
                    CURECN=""
                    ;;
            esac
            ;;
        *)
            sqm_warn "ecn value $1 not handled"
            ;;
    esac
    sqm_debug "get_ECN: $1 CURECN: ${CURECN} IECN: ${IECN} EECN: ${EECN}"
    echo ${CURECN}

}

